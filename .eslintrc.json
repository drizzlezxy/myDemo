// 使用前请全局安装ESLint 指令：npm install -g eslint 并将此文件加入到 本地跟目录
// 命令行检测 代码：  命令行里 输入 eslint file.js 检测指定文件 或者 输入 eslint lib/**  检测指定文件夹内的所有文件。
// 指令eslint file.js --fix 可以自动修复部分规则
{
    "parser": "babel-eslint",
    // 解析器，需要npm下载 指令 npm install -g babel-eslint
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "env": {
        "es6": true
            //定义了预定义的全局变量 支持除模块外所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。
    },
    "extends": [], //"eslint:recommended"
    "plugins": [
        "react"
        // 插件 需要下载 指令 npm install -g eslint-plugin-react
    ],
    "rules": {
        /**
         * 特殊的规则
         */
        "quotes": 1
            // 引号 格式  暂时关闭报错  属性：
            // "always" （默认）需要引用所有对象文字属性名称

        //     "indent": ["error", 2],

        //     // "indent": ["error", 2,{ "VariableDeclarator": { "var": 2, "let": 2, "const": 3 }}, { "ObjectExpression": 1 }],
        //     // 固定缩进  2空格  [2,"tab"], "VariableDeclarator": { "var": 2, "let": 2, "const": 3 } 定义了多次声明变量时缩进格式
        //     //  { "ObjectExpression": 1 } 定义了 对象字面量属性 的缩进格式


        //     /**
        //      * 推荐报错规则
        //      */

        //     "no-const-assign": 2,
        //     // 禁止修改 const 声明的变量

        //     "no-dupe-class-members": 2,
        //     // 禁止类成员中出现重复的名字

        //     "no-empty-function": 2,
        //     //禁止出现空函数.如果一个函数包含了一条注释，它将不会被认为有问题。

        //     "no-eval": 2,
        //     //禁用 eval()

        //     "no-new-wrappers": 2,
        //     //禁止对 String，Number 和 Boolean 使用 new 操作符

        //     "no-empty": 2,
        //     //禁止出现空语句块 有注释就不算空语句

        //     "no-undef-init": 2,
        //     //禁止将 undefined 作为标识符 

        //     "array-bracket-spacing": [2, "never"],
        //     // 指定数组的元素之间要以空格隔开(, 后面)， never参数：[ 之前和 ]  之后不能带空格，如：[0, 0]
        //     //always参数：[ 之前和 ] 之后必须带空格如：[ 0, 0 ]

        //     "default-case": 2,
        //     //要求 switch 语句中有 default 分支 

        //     "no-redeclare": 2,
        //     // 禁止使用 var 多次声明同一变量 

        //     "no-array-constructor": 2,
        //     /*声明数组，不用构造函数,new Array(),使用[] */

        //     "space-before-blocks": [2, "always"],
        //     /*在{}块之前总是要有空格*/

        //     "no-new-func": 2,
        //     //不允许Function 构造函数 : new Function

        //     "complexity": ["error", {
        //         "max": 6
        //     }],
        //     //指定程序中允许的最大环路复杂度


        //     "no-useless-constructor": 2,
        //     //禁用不必要的构造函数

        //     "no-duplicate-imports": ["error", {
        //         "includeExports": true
        //     }],
        //     //不允许复制入口模块 （包括出口）

        //     "func-style": [2, "declaration", {
        //         "allowArrowFunctions": true
        //     }],
        //     //函数声明方式 允许箭头函数

        //     "arrow-spacing": [2, {
        //         "before": true,
        //         "after": true
        //     }],
        //     //强制箭头函数的箭头前后使用一致的空格 

        //     "use-isnan": 2,
        //     //要求使用 isNaN() 检查 NaN

        //     "jsx-quotes": [1, "prefer-single"],
        //     //强制在 JSX 属性中一致地使用单引号

        //     "max-len": [2, 120, 2],
        //     //行宽 必须小于 最大值

        //     "spaced-comment": ["error", "always"],
        //     //强制在注释中 // 或 /* 使用一致的空格

        //     /**
        //      * 推荐警告的规则
        //      */

        //     "no-caller": 1,
        //     // 禁用 arguments.caller 或 arguments.callee        

        //     "object-curly-spacing": [1, "always"],
        //     // 强制在大括号中使用一致的空格

        //     "array-callback-return": 1,
        //     /*数组回调函数return */

        //     "no-prototype-builtins": 1,
        //     //禁止直接调用 Object.prototypes 的内置属性        

        //     "no-var": 1,
        //     //要求使用 let 或 const 而不是 var

        //     "no-unused-vars": 1,
        //     //定义 未使用

        //     "prefer-template": 1,
        //     //要求使用模板字面量而非字符串连接

        //     "keyword-spacing": 1,
        //     //强制在关键字前后使用一致的空格

        //     "space-infix-ops": 1,
        //     //要求操作符周围有空格

        //     "camelcase": 1,
        //     //强制使用骆驼拼写法命名约定

        //     "no-shadow": 1,
        //     //禁止 var 声明 与外层作用域的变量同名

        //     "dot-notation": 1,
        //     //在JavaScript中，可以使用点符号（foo.bar）
        //     //或方括号符号（foo["bar"]）来访问属性。然而，点符号通常是首选的，
        //     //因为它更容易阅读，更少冗长，并且与积极的JavaScript最小化器更好地工作。

        //     "no-param-reassign": [1, {
        //             "props": true
        //         }]
        //         //禁止对 function 的参数进行重新赋值
    }
}